pipeline {
    agent any

    stages {

        stage('拉取git代码') {
            steps {
                checkout scmGit(branches: [[name: '${TAG}']], extensions: [], userRemoteConfigs: [[credentialsId: 'ced296a9-58b8-4e41-926e-e13a1885d932', url: 'https://git.anyserver.online:20443/tqsummer/hello-jenkins.git']])
            }
        }
        stage('Maven构建代码') {
            steps {
                sh '/var/jenkins_home/softwares/apache-maven-3.9.5/bin/mvn clean package -DskipTests -DTAG=${TAG} -DIMAGE_NAME=${IMAGE_NAME}'
            }
        }
        stage('检测代码质量') {
            steps {
                sh '/var/jenkins_home/softwares/sonar-scanner-5.0.1.3006/bin/sonar-scanner -Dsonar.projectname=${JOB_NAME} -Dsonar.projectKey=${JOB_NAME} -Dsonar.sources=./ -Dsonar.java.binaries=./jenkins-app01/target -Dsonar.login=sqa_5f9d4bad8e7739b80018c2666b5cc0c4e0b64c59'
            }
        }
        stage('上传镜像到Harbor') {
            environment {
                IMAGE_NAME = '${JOB_NAME}:${TAG}'
                HARBOR_IMAGE_NAME='docker-hub.anyserver.online/my-jenkins-app/${IMAGE_NAME}'
            }
            steps {
                sh '''BUILD_DIR=docker-${TAG}-build
                    mkdir -p ${BUILD_DIR}
                    cp jenkins-app01/deploy/Dockerfile ${BUILD_DIR}
                    cp jenkins-app01/target/*.jar ${BUILD_DIR}
                    docker buildx build -t ${IMAGE_NAME} ${BUILD_DIR}/
                    docker login -u appdev -p Appdev12345 docker-hub.anyserver.online
                    docker tag ${IMAGE_NAME} ${HARBOR_IMAGE_NAME}
                    docker push ${HARBOR_IMAGE_NAME}
                    docker rmi ${HARBOR_IMAGE_NAME}
                    docker rmi ${IMAGE_NAME}
                    rm -fr ${BUILD_DIR}'''
            }
        }
        stage('上传k8s部署文件并部署') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'k8s-master01', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''cd /usr/local/app-root/${JOB_NAME}-${TAG}
kubectl -f apply deploy.yaml''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '${JOB_NAME}-${TAG}', remoteDirectorySDF: false, removePrefix: 'jenkins-app01/deploy/k8s/', sourceFiles: 'jenkins-app01/deploy/k8s/deploy.yaml')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }
        }
    }
    post {
        success {
            dingtalk(
                robot: 'dingding-jenkins-bot',
                type: 'MARKDOWN',
                title: 'success: ${JOB_NAME}',
                text: ["- 成功构建：${JOB_NAME}! \n- 版本：${TAG} \n- 持续时间：${currentBuild.durationString}"]
            )
        }
        failure {
            dingtalk(
                robot: 'dingding-jenkins-bot',
                type: 'MARKDOWN',
                title: 'failed: ${JOB_NAME}',
                text: ["- 失败构建：${JOB_NAME}! \n- 版本：${TAG} \n- 持续时间：${currentBuild.durationString}"]
            )
        }
    }

}
